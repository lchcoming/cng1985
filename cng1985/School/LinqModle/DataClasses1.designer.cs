#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace School.LinqModle
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Work")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNewsSubType(NewsSubType instance);
    partial void UpdateNewsSubType(NewsSubType instance);
    partial void DeleteNewsSubType(NewsSubType instance);
    partial void InsertNewsType(NewsType instance);
    partial void UpdateNewsType(NewsType instance);
    partial void DeleteNewsType(NewsType instance);
    partial void InsertNews(News instance);
    partial void UpdateNews(News instance);
    partial void DeleteNews(News instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WorkConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<NewsSubType> NewsSubType
		{
			get
			{
				return this.GetTable<NewsSubType>();
			}
		}
		
		public System.Data.Linq.Table<NewsType> NewsType
		{
			get
			{
				return this.GetTable<NewsType>();
			}
		}
		
		public System.Data.Linq.Table<News> News
		{
			get
			{
				return this.GetTable<News>();
			}
		}
	}
	
	[Table(Name="dbo.NewsSubType")]
	public partial class NewsSubType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NewsSubTypeName;
		
		private System.Nullable<int> _NewsType;
		
		private EntitySet<News> _News;
		
		private EntityRef<NewsType> _NewsType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNewsSubTypeNameChanging(string value);
    partial void OnNewsSubTypeNameChanged();
    partial void OnNewsTypeChanging(System.Nullable<int> value);
    partial void OnNewsTypeChanged();
    #endregion
		
		public NewsSubType()
		{
			this._News = new EntitySet<News>(new Action<News>(this.attach_News), new Action<News>(this.detach_News));
			this._NewsType1 = default(EntityRef<NewsType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_NewsSubTypeName", DbType="NVarChar(50)")]
		public string NewsSubTypeName
		{
			get
			{
				return this._NewsSubTypeName;
			}
			set
			{
				if ((this._NewsSubTypeName != value))
				{
					this.OnNewsSubTypeNameChanging(value);
					this.SendPropertyChanging();
					this._NewsSubTypeName = value;
					this.SendPropertyChanged("NewsSubTypeName");
					this.OnNewsSubTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_NewsType", DbType="Int")]
		public System.Nullable<int> NewsType
		{
			get
			{
				return this._NewsType;
			}
			set
			{
				if ((this._NewsType != value))
				{
					if (this._NewsType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsTypeChanging(value);
					this.SendPropertyChanging();
					this._NewsType = value;
					this.SendPropertyChanged("NewsType");
					this.OnNewsTypeChanged();
				}
			}
		}
		
		[Association(Name="NewsSubType_News", Storage="_News", ThisKey="ID", OtherKey="NewsSubType")]
		public EntitySet<News> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		[Association(Name="NewsType_NewsSubType", Storage="_NewsType1", ThisKey="NewsType", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public NewsType NewsType1
		{
			get
			{
				return this._NewsType1.Entity;
			}
			set
			{
				NewsType previousValue = this._NewsType1.Entity;
				if (((previousValue != value) 
							|| (this._NewsType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsType1.Entity = null;
						previousValue.NewsSubType.Remove(this);
					}
					this._NewsType1.Entity = value;
					if ((value != null))
					{
						value.NewsSubType.Add(this);
						this._NewsType = value.ID;
					}
					else
					{
						this._NewsType = default(Nullable<int>);
					}
					this.SendPropertyChanged("NewsType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.NewsSubType1 = this;
		}
		
		private void detach_News(News entity)
		{
			this.SendPropertyChanging();
			entity.NewsSubType1 = null;
		}
	}
	
	[Table(Name="dbo.NewsType")]
	public partial class NewsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeName;
		
		private System.Nullable<System.DateTime> _PubTime;
		
		private EntitySet<NewsSubType> _NewsSubType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnPubTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPubTimeChanged();
    #endregion
		
		public NewsType()
		{
			this._NewsSubType = new EntitySet<NewsSubType>(new Action<NewsSubType>(this.attach_NewsSubType), new Action<NewsSubType>(this.detach_NewsSubType));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_PubTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PubTime
		{
			get
			{
				return this._PubTime;
			}
			set
			{
				if ((this._PubTime != value))
				{
					this.OnPubTimeChanging(value);
					this.SendPropertyChanging();
					this._PubTime = value;
					this.SendPropertyChanged("PubTime");
					this.OnPubTimeChanged();
				}
			}
		}
		
		[Association(Name="NewsType_NewsSubType", Storage="_NewsSubType", ThisKey="ID", OtherKey="NewsType")]
		public EntitySet<NewsSubType> NewsSubType
		{
			get
			{
				return this._NewsSubType;
			}
			set
			{
				this._NewsSubType.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewsSubType(NewsSubType entity)
		{
			this.SendPropertyChanging();
			entity.NewsType1 = this;
		}
		
		private void detach_NewsSubType(NewsSubType entity)
		{
			this.SendPropertyChanging();
			entity.NewsType1 = null;
		}
	}
	
	[Table(Name="dbo.News")]
	public partial class News : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _NewsContent;
		
		private System.Nullable<System.DateTime> _PupTime;
		
		private System.Nullable<int> _NewsSubType;
		
		private EntityRef<NewsSubType> _NewsSubType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNewsContentChanging(string value);
    partial void OnNewsContentChanged();
    partial void OnPupTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPupTimeChanged();
    partial void OnNewsSubTypeChanging(System.Nullable<int> value);
    partial void OnNewsSubTypeChanged();
    #endregion
		
		public News()
		{
			this._NewsSubType1 = default(EntityRef<NewsSubType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_NewsContent", DbType="NVarChar(2000)")]
		public string NewsContent
		{
			get
			{
				return this._NewsContent;
			}
			set
			{
				if ((this._NewsContent != value))
				{
					this.OnNewsContentChanging(value);
					this.SendPropertyChanging();
					this._NewsContent = value;
					this.SendPropertyChanged("NewsContent");
					this.OnNewsContentChanged();
				}
			}
		}
		
		[Column(Storage="_PupTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PupTime
		{
			get
			{
				return this._PupTime;
			}
			set
			{
				if ((this._PupTime != value))
				{
					this.OnPupTimeChanging(value);
					this.SendPropertyChanging();
					this._PupTime = value;
					this.SendPropertyChanged("PupTime");
					this.OnPupTimeChanged();
				}
			}
		}
		
		[Column(Storage="_NewsSubType", DbType="Int")]
		public System.Nullable<int> NewsSubType
		{
			get
			{
				return this._NewsSubType;
			}
			set
			{
				if ((this._NewsSubType != value))
				{
					if (this._NewsSubType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsSubTypeChanging(value);
					this.SendPropertyChanging();
					this._NewsSubType = value;
					this.SendPropertyChanged("NewsSubType");
					this.OnNewsSubTypeChanged();
				}
			}
		}
		
		[Association(Name="NewsSubType_News", Storage="_NewsSubType1", ThisKey="NewsSubType", OtherKey="ID", IsForeignKey=true)]
		public NewsSubType NewsSubType1
		{
			get
			{
				return this._NewsSubType1.Entity;
			}
			set
			{
				NewsSubType previousValue = this._NewsSubType1.Entity;
				if (((previousValue != value) 
							|| (this._NewsSubType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsSubType1.Entity = null;
						previousValue.News.Remove(this);
					}
					this._NewsSubType1.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._NewsSubType = value.ID;
					}
					else
					{
						this._NewsSubType = default(Nullable<int>);
					}
					this.SendPropertyChanged("NewsSubType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
